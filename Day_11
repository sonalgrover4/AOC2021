import java.io.*;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.*;
import java.util.Arrays;
import java.util.Map.Entry;
import java.util.ArrayList;

public class MyClass extends Point
{
    static int r_max=-1;
    static int c_max=0;
    static HashMap<Point, Integer> hm=new HashMap<Point, Integer>();
    static int fl_cnt=0;
    
    public static void main(String args[])
    {
        try  
        {  
            File file = new File("/uploads/Day_11.txt");    //creates a new file instance  
            FileReader fr=new FileReader(file);   //reads the file  
            BufferedReader br=new BufferedReader(fr);  //creates a buffering character input stream  
            String line;
            while((line=br.readLine())!=null)  
            {
                r_max+=1;
                if(c_max==0)
                    c_max=line.length()-1;
                String[] bre=line.split("");
                for(int i=0; i<bre.length; i++)
                {
                    int c=Integer.parseInt(bre[i]);
                    hm.put(new Point(r_max, i), c);
                }
            }
            fr.close();    //closes the stream and release the resources
            
            System.out.println(r_max+" "+c_max);
            steps(1000);
            printhm();
            System.out.println(fl_cnt);
        }
        catch(Exception e)  
        {  
            e.printStackTrace();  
        }
    }
    
    static void steps(int s)
    {
        int[] dx={-1, -1, -1, 0, 0, 1, 1, 1};
        int[] dy={-1, 0, 1, -1, 1, -1, 0, 1};
        for(int i=1; i<=s; i++)
        {
            ArrayList<Point> al=new ArrayList<Point>();
            for(Point p: hm.keySet())
                hm.put(p, hm.get(p)+1);
            //printhm();
            
            boolean flag;
            do
            {
                flag=false;
                
                for(Point p:hm.keySet())
                {
                    if(hm.get(p)>9)
                    {
                        flag=true;
                        fl_cnt+=1;
                        hm.put(p, 0);
                        al.add(p);
                        
                        int r=p.x;
                        int c=p.y;
                        //System.out.println(r+" "+c);
                        for(int j=0; j<dx.length; j++)
                        {
                            int r1=r+dx[j];
                            int c1=c+dy[j];
                            //System.out.println(r1+" "+c1);
                            check(r1, c1, al);
                        }
                    }
                }
                //printhm();
            }while(flag==true);
            
            boolean syn=checksync();
            if(syn==true)
            {
                System.out.println("Step: "+i);
                break;
            }
        }
    }
    
    static void printhm()
    {
        for(int r=0; r<=r_max; r++)
        {
            for(int c=0; c<=c_max; c++)
            {
                Point p=new Point(r,c);
                System.out.print(hm.get(p));
            }
            System.out.println();
        }
        System.out.println();
    }
    
    static void check(int r, int c, ArrayList<Point> al)
    {
        if(r>=0 && c>=0 && r<=9 && c<=9)
        {
            Point p=new Point(r,c);
            if(hm.get(p)<=9 && !(al.contains(p)))
                //System.out.println(r+" "+c);
                hm.put(p, hm.get(p)+1);
        }
    }
    
    static boolean checksync()
    {
        int flag=true;
        for(Point p:hm.keySet())
        {
            if(hm.get(p)!=0)
            {
                flag=false;
                break;
            }
        }
        return flag;
    }
}
