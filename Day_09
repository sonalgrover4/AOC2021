import java.io.*;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.*;
import java.util.Arrays;
import java.util.Map.Entry;
import java.util.ArrayList;

public class MyClass extends Point
{
    static int r_max=-1;
    static int c_max=0;
    static HashMap<Point, Boolean> hm2=new HashMap<Point, Boolean>();
    
    public static void main(String args[])
    {
        HashMap<Point, Integer> hm=new HashMap<Point, Integer>();
        int total=0;
        try  
        {  
            File file = new File("/uploads/Day_9.txt");    //creates a new file instance  
            FileReader fr=new FileReader(file);   //reads the file  
            BufferedReader br=new BufferedReader(fr);  //creates a buffering character input stream  
            String line;
            while((line=br.readLine())!=null)  
            {
                r_max+=1;
                if(c_max==0)
                    c_max=line.length()-1;
                String[] bre=line.split("");
                for(int i=0; i<bre.length; i++)
                {
                    int c=Integer.parseInt(bre[i]);
                    hm.put(new Point(r_max, i), c);
                    hm2.put(new Point(r_max, i), true);
                }
            }
            fr.close();    //closes the stream and release the resources
            
        }
        catch(Exception e)  
        {  
            e.printStackTrace();  
        }
        
       // System.out.println(r_max + "    " + c_max);
       // System.out.println(hm);
        
        rec(hm);
        //System.out.println(x);
       // System.out.println(hm2);
       
       ArrayList<Integer> al=new ArrayList<Integer>();
        
        for(int r=0; r<=r_max; r++)
		{
		    for(int c=0; c<=c_max; c++)
		    {
		        Point pt=new Point(r,c);
		        
		        if(hm2.get(pt) == true)
		        {
		            total+=hm.get(pt)+1;
		            
		            HashSet<Point> se = new HashSet<Point>();
                    check(hm, r, c, se);
                    al.add(se.size());
		        }
		    }
		}
        
        Collections.sort(al, Collections.reverseOrder());
        System.out.println(al.get(0)*al.get(1)*al.get(2));
        
        /*for (Map.Entry<Point, Boolean> entry : hm2.entrySet())
        {
            if(entry.getValue() == true)
            {
                Point p = entry.getKey();
                total+=hm.get(p)+1;
                
                Set<Point> se = new LinkedHashSet<Point>();
                check(hm, p, se);
                System.out.println(se.size());
            }
        }*/
        System.out.println(total);
    }
    
    static void rec(HashMap<Point, Integer> hm)
    {
		for(int r=0; r<=r_max; r++)
		{
		    for(int c=0; c<=c_max; c++)
		    {
		        Point p = new Point(r, c);
		        int val = hm.get(p);
		        
		        if(hm2.get(p) == true)
        		{
        			if(r<r_max)
        			{
        				Point pr = new Point(r+1, c);
        				int ri=hm.get(pr);
        				if(val>=ri)
        				    hm2.put(p, false);
        				else
        				    hm2.put(pr, false);
        			}
        			
        			if(c<c_max)
        			{
        				Point pd = new Point(r, c+1);
        				int dn=hm.get(pd);
        				if(val>=dn)
        					hm2.put(p, false);
        				else
        				    hm2.put(pd, false);
        			}
        			
        			if(r>0)
        			{
        				Point pl = new Point(r-1, c);
        				int lf=hm.get(pl);
        				if(val>=lf)
        					hm2.put(p, false);
        				else
        				    hm2.put(pl, false);
        			}
        			
        			if(c>0)
        			{
        				Point pu = new Point(r, c-1);
        				int up=hm.get(pu);
        				if(val>=up)
        					hm2.put(p, false);
        				else
        				    hm2.put(pu, false);
        			}
        		}
		    }
		}
    }
    
    
    static void check(HashMap<Point, Integer> hm, int r, int c, HashSet<Point> se)
    {
         Point p=new Point(r, c);
         
         if(hm.get(p)!=9)
         {
            if(!(se.contains(p)))
             {
                 se.add(p);
                 check(hm, r+1, c, se);
                 check(hm, r-1, c, se);
                 check(hm, r, c+1, se);
                 check(hm, r, c-1, se);
             }
         }
    }
}
